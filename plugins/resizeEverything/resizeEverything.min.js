(function(factory,undefined){if(typeof define==='function'&&define.amd){define(['jquery'],factory);}else if(typeof module==='object'&&typeof module.exports==='object'){module.exports=factory(require('jquery'));}else{factory(jQuery);}}(function($,undefined){if($.fn.resizableSafe)
    return;$.fn.resizableSafe=function fnResizable(options){var defaultOptions={handleSelector:null,resizeWidth:true,resizeHeight:false,resizeWidthFrom:'right',resizeHeightFrom:'bottom',onDragStart:null,onDragEnd:null,onDrag:null,touchActionNone:true,instanceId:null,eventMinWidth:4,redrawFunc:null,resizeStep:4}
    if(typeof options=="object")
    defaultOptions=$.extend(defaultOptions,options)
    return this.each(function(){var opt=$.extend({},defaultOptions)
    if(!opt.instanceId)opt.instanceId="rsz_"+new Date().getTime()
    var resizeStepParam=null
    var stepStart=null
    var step=null
    if(options.resizeStep)resizeStepParam=options.resizeStep
    else resizeStepParam=defaultOptions.resizeStep
    var $el=$(this)
    var $elementInfo
    let detail=$el.find('.EventDetail')
    let data=JSON.parse($(detail).data('data'))
    let date=new Date(data.end)
    if(date.getTime()<new Date().getTime()){return}
    var $handle
    var $handleLeft
    var whichHandle=''
    $($el).append('<div class="stickR"></div>')
    $($el).append('<div class="stickL"></div>')
    var resizerL=getHandleLeft($el)
    var resizerR=getHandle($el)
    var original_width=0
    var original_x=0
    var original_mouse_x=0
    var leftRange   
    var rightRange
    var minWidth
    var lastWidth
    var labelWidth
    var lastPageX
    var lastDirection
    var labelDateStart=null
    var labelDateEnd=null
    function mouseDown(e){whichHandle=e.target.className
    e.preventDefault()
    stepStart=($('.ScheduleDay').width()/ 24)*resizeStepParam
    step=stepStart
    original_width=parseFloat($el.width())
    lastWidth=parseFloat($el.width())
    original_x=Number($($el).css('left').replace('px',''))
    original_mouse_x=e.pageX
    lastPageX=e.pageX
    bordersCalculation()
    $(document).on('mousemove.'+opt.instanceId,resize)
    $(document).on('mouseup.'+opt.instanceId,stopResize)
    let label=drawResizeLabel(whichHandle)
    document.body.appendChild(label)
    labelWidth=$(label).width()*1.3
    $(label).css('left',e.clientX+'px').css('top',e.clientY-80+'px')
    if(whichHandle==='stickL'){$(label).css('left',e.clientX-labelWidth+'px')}
    if(opt.onDragStart){if(opt.onDragStart(e,$el,opt)===false){return;}}}
    resizerL.on("mousedown."+opt.instanceId,mouseDown)
    resizerR.on("mousedown."+opt.instanceId,mouseDown)
    function resize(e){if(whichHandle.indexOf('stickL')!==-1){let width=original_width-(e.pageX-original_mouse_x)
    let currentDirection=lastPageX>e.pageX?'l':'r'
    let didDirectionChanged=directionChanged(lastDirection,currentDirection)
    if(didDirectionChanged){step=stepStart
    original_width=width
    original_mouse_x=e.pageX
    original_x=Number($($el).css('left').replace('px',''))}
    lastPageX=e.pageX
    lastDirection=currentDirection
    if(width>=minWidth&&width<=leftRange){let deltaWidth=original_width-width
    if(Math.abs(deltaWidth)>step){let widthInPercent=100*width / $('.ScheduleDay').width()
    let oldPositionLeft=original_x*100 / $('.ScheduleDay').width()
    let newPositionLeft
    if(original_x===0){newPositionLeft=(original_x+(e.pageX-original_mouse_x))
    newPositionLeft=100*newPositionLeft / $('.ScheduleDay').width()}
    else{newPositionLeft=(original_x+(e.pageX-original_mouse_x))*oldPositionLeft / original_x}
    $el[0].style.width=widthInPercent+'%'
    $el[0].style.left=newPositionLeft+'%'
    changeResizeLabelText('l',currentDirection)
    $('#resizeTempTimeLabel').css('left',e.clientX-labelWidth+'px')
    step+=stepStart}}}
    else if(whichHandle.indexOf('stickR')!==-1){let width=original_width+(e.pageX-original_mouse_x)
    let currentDirection=width>lastWidth?'r':'l'
    let didDirectionChanged=directionChanged(lastDirection,currentDirection)
    if(didDirectionChanged){step=stepStart
    original_width=width
    original_mouse_x=e.pageX
    width=original_width+(e.pageX-original_mouse_x)}
    lastDirection=currentDirection
    lastWidth=width
    if(width>=minWidth&&width<=rightRange){let deltaWidth=original_width-width
    if(Math.abs(deltaWidth)>step){let widthInPercent
    if(currentDirection==='r')widthInPercent=100*(original_width+step)/ $('.ScheduleDay').width()
    else widthInPercent=100*(original_width-step)/ $('.ScheduleDay').width()
    $el[0].style.width=widthInPercent+'%'
    changeResizeLabelText('r',currentDirection)
    $('#resizeTempTimeLabel').css('left',e.clientX+'px')
    step+=stepStart}}}
    if(opt.onDrag){opt.onDrag(e)}}
    function stopResize(e){e.stopPropagation();e.preventDefault();$(document).off('mousemove.'+opt.instanceId);$(document).off('mouseup.'+opt.instanceId);window.removeEventListener('mousemove.'+opt.instanceId,resize)
    $('#resizeTempTimeLabel').remove()
    let sDate=dateParse(labelDateStart.toDate().toLocaleString())
    let eDate=dateParse(labelDateEnd.toDate().toLocaleString())
    let updatedData={startDate:moment(sDate),endDate:moment(eDate),eventId:$elementInfo.id}
    if(options.redrawFunc){options.redrawFunc($elementInfo.locationId,updatedData)}
    if(opt.onDragEnd){opt.onDragEnd(updatedData)}}
    function bordersCalculation(){let dayWidth=$('.ScheduleDay').width()
    minWidth=dayWidth*options.eventMinWidth / 24
    let elParent=$($el).parent()
    let parentOfParent=$(elParent).parent()
    let daysNumber=$(parentOfParent).children()
    let childNumber=$(elParent).attr('childnumber')
    let fullDaysBeforeEvent=0
    for(let index=1;index<childNumber;index++){fullDaysBeforeEvent++}
    let commonWidth=dayWidth*daysNumber.length
    let leftBorder=fullDaysBeforeEvent*dayWidth
    leftRange=original_width+leftBorder+original_x
    rightRange=(commonWidth-leftBorder-original_x)
    console.log(leftRange,rightRange);}
    function directionChanged(previous,now){if(previous===now||previous===null||previous===undefined)return false
    return true}
    function dateParse(datestring){let dateParts=datestring.split(/[.,: ]+/);let correctDate=new Date(dateParts[2],dateParts[1]-1,dateParts[0],dateParts[3],dateParts[4]);return correctDate}
    function drawResizeLabel(direction){let eventBlock=$($el).find('.EventDetail')
    $elementInfo=JSON.parse($(eventBlock).data('data'))
    labelDateStart=moment($elementInfo.start)
    labelDateEnd=moment($elementInfo.end)
    let dateStartStr=labelDateStart.toDate().toLocaleString()
    let dateEndStr=labelDateEnd.toDate().toLocaleString()
    let div1=document.createElement('div')
    div1.id='resizeTempTimeLabel'
    div1.style.marginLeft="7px";div1.style.padding="15px";div1.style.backgroundColor="rgb(44, 44, 44)";div1.style.display="flex";div1.style.justifyContent="center";div1.style.alignItems="center";div1.style.position="absolute";div1.style.zIndex="3000";div1.style.opacity="0.8";let div2=document.createElement('div')
    div2.style.color="white";div2.style.fontWeight="bold";div2.style.fontSize="14px";div2.innerText=direction==='stickL'?dateStartStr:dateEndStr
    $(div1).append(div2)
    return div1}
    function changeResizeLabelText(handler,arrow){if(handler==='l'){if(arrow==='r')labelDateStart=moment(labelDateStart).add(resizeStepParam,'hour')
    else if(arrow==='l')labelDateStart=moment(labelDateStart).add(resizeStepParam*-1,'hour')
    $('#resizeTempTimeLabel div').text(labelDateStart.toDate().toLocaleString())}
    else if(handler==='r'){if(arrow==='r')labelDateEnd=moment(labelDateEnd).add(resizeStepParam,'hour')
    else if(arrow==='l')labelDateEnd=moment(labelDateEnd).add(resizeStepParam*-1,'hour')
    $('#resizeTempTimeLabel div').text(labelDateEnd.toDate().toLocaleString())}}
    function getHandle($el){return $el.find('.stickR')}
    function getHandleLeft($el){return $el.find('.stickL')}
    if(options==='destroy'){opt=$el.data('resizable');if(!opt)
    return;$handle=getHandle($el);$handle.off("mousedown."+opt.instanceId+" touchstart."+opt.instanceId);if(opt.touchActionNone)
    $handle.css("touch-action","");$handleLeft=getHandleLeft($el);$handleLeft.off("mousedown."+opt.instanceId+" touchstart."+opt.instanceId);if(opt.touchActionNone)
    $handleLeft.css("touch-action","");$handle=document.getElement
    $el.removeClass("resizable");return;}
    $el.data('resizable',opt);$handle=getHandle($el);$handleLeft=getHandleLeft($el)
    if(opt.touchActionNone){$handle.css("touch-action","none");$handleLeft.css("touch-action","none")}
    $el.addClass("resizable");});};if(!$.fn.resizable)
    $.fn.resizable=$.fn.resizableSafe;}));